from flask import Flask, request, jsonify
from flask_cors import CORS  # üü¢ Importation pour g√©rer les requ√™tes CORS
import openai
import os
from dotenv import load_dotenv
import json
import traceback

load_dotenv()

app = Flask(__name__)

# üü¢ Activer CORS uniquement pour ton site WordPress
CORS(app, origins=["https://p-i-investment.com"])

print("üöÄ Lancement de l'application Flask...")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

@app.route('/')
def home():
    return "‚úÖ API Flask fonctionne correctement !"

@app.route('/test')
def test():
    return "üöÄ Route de test fonctionne !"

@app.route('/routes', methods=['GET'])
def list_routes():
    """Affiche toutes les routes disponibles pour voir si /search_real_estate est bien charg√©e."""
    routes = []
    for rule in app.url_map.iter_rules():
        routes.append(str(rule))
    return jsonify({"routes": routes})

@app.route('/search_real_estate', methods=['POST'])
def search_real_estate():
    """G√©n√®re des annonces bas√©es sur les crit√®res envoy√©s par WordPress"""
    try:
        data = request.json
        if not data:
            return jsonify({"error": "‚ùå Aucune donn√©e re√ßue"}), 400
        
        print(f"üì° Recherche re√ßue : {data}")

        # V√©rifier si tous les champs sont pr√©sents
        required_fields = ["city", "property_type", "surface_min", "surface_max", "price_min", "price_max"]
        for field in required_fields:
            if field not in data:
                print(f"‚ùå Champ manquant : {field}")
                return jsonify({"error": f"Champ {field} manquant"}), 400

        # Cr√©ation du prompt pour OpenAI
        prompt = f"""
        Je cherche des annonces immobili√®res avec ces crit√®res :
        - Ville : {data["city"]}
        - Type : {data["property_type"]}
        - Surface : entre {data["surface_min"]} et {data["surface_max"]} m¬≤
        - Budget : entre {data["price_min"]} et {data["price_max"]} ‚Ç¨

        G√©n√®re 5 annonces fictives avec :
        - Type
        - Surface (m¬≤)
        - Nombre de pi√®ces
        - Prix (en ‚Ç¨)
        - Localisation
        - Une description courte
        - Un lien fictif (ex: "https://annonce-immobiliere-fictive.com/annonce1")

        R√©pond uniquement avec du texte brut, format√© comme suit :
        - Annonce 1 : [Description] (Lien)
        - Annonce 2 : [Description] (Lien)
        - Annonce 3 : [Description] (Lien)
        - Annonce 4 : [Description] (Lien)
        - Annonce 5 : [Description] (Lien)
        """

        print("üì° Envoi du prompt √† OpenAI...")

        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )

        raw_result = response.choices[0].message.content.strip()
        print(f"üß† R√©ponse brute OpenAI : {raw_result}")

        # V√©rifier si la r√©ponse est bien sous forme de texte
        if raw_result:
            print(f"‚úÖ R√©ponse OpenAI re√ßue.")
            return jsonify({"suggestions": raw_result}), 200
        else:
            print("‚ùå Erreur : La r√©ponse d'OpenAI est vide.")
            return jsonify({"error": "Erreur lors de la g√©n√©ration des annonces"}), 500

    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale dans /search_real_estate : {e}")
        traceback.print_exc()
        return jsonify({"error": f"Une erreur s'est produite: {str(e)}"}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
