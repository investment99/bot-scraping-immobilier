from flask import Flask, request, jsonify
import openai
import os
from dotenv import load_dotenv
import json
import traceback

load_dotenv()

app = Flask(__name__)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

cache = {}

@app.route('/search_real_estate', methods=['POST'])
def search_real_estate():
    """G√©n√®re des annonces bas√©es sur les crit√®res de recherche envoy√©s par le formulaire."""
    try:
        data = request.json
        print(f"üì° Recherche re√ßue : {data}")

        # V√©rification des champs re√ßus
        city = data.get("city", "Non sp√©cifi√©")
        property_type = data.get("property_type", "Non sp√©cifi√©")
        surface_min = data.get("surface_min", "Non sp√©cifi√©")
        surface_max = data.get("surface_max", "Non sp√©cifi√©")
        price_min = data.get("price_min", "Non sp√©cifi√©")
        price_max = data.get("price_max", "Non sp√©cifi√©")

        # Cr√©ation du prompt pour OpenAI
        prompt = f"""
        Je cherche des annonces immobili√®res avec ces crit√®res :
        - Ville : {city}
        - Type de bien : {property_type}
        - Surface : entre {surface_min} et {surface_max} m¬≤
        - Budget : entre {price_min} et {price_max} ‚Ç¨

        G√©n√®re 5 annonces fictives avec :
        - Type de bien
        - Surface (m¬≤)
        - Nombre de pi√®ces
        - Prix (en ‚Ç¨)
        - Localisation
        - Une description courte
        - Un lien fictif (ex: "https://annonce-immobiliere-fictive.com/annonce1")

        R√©pond uniquement avec du JSON strictement format√©.
        """

        # Appel √† OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )

        raw_result = response["choices"][0]["message"]["content"].strip()
        print(f"üß† R√©ponse brute OpenAI : {raw_result}")

        # V√©rification et correction du JSON
        try:
            suggestions = json.loads(raw_result)
            return jsonify({"suggestions": suggestions}), 200
        except json.JSONDecodeError:
            print(f"‚ùå Erreur JSON OpenAI")
            return jsonify({"error": "Erreur lors de la g√©n√©ration des annonces"}), 500

    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale : {e}")
        traceback.print_exc()
        return jsonify({"error": f"Une erreur s'est produite: {str(e)}"}), 500


@app.route('/')
def home():
    return "‚úÖ API Flask fonctionne correctement !"


if __name__ == "__main__":
    app.run(debug=True, port=5000)
