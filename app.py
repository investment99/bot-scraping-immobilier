from flask import Flask, request, send_file, jsonify
from flask_cors import CORS
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle, KeepTogether
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.lib import colors
from datetime import datetime
import os
import tempfile
import threading
import time
import uuid
import pandas as pd
import matplotlib.pyplot as plt
import gzip
from openai import OpenAI
from markdown2 import markdown as md_to_html
from bs4 import BeautifulSoup

# üîß Initialisation de Flask
app = Flask(__name__)
CORS(app)

# üîê Client OpenAI
client = OpenAI()

PDF_FOLDER = "./pdf_reports/"
os.makedirs(PDF_FOLDER, exist_ok=True)

# Dossier contenant les fichiers DVF (.csv.gz)
DVF_FOLDER = "./dvf_data/"

def markdown_to_elements(md_text):
    elements = []
    html_content = md_to_html(md_text, extras=["tables"])
    soup = BeautifulSoup(html_content, "html.parser")
    styles = getSampleStyleSheet()
    PAGE_WIDTH = A4[0] - 4 * cm

    for elem in soup.contents:
        if elem.name == "table":
            table_data = []
            for row in elem.find_all("tr"):
                row_data = [Paragraph(cell.get_text(strip=True), styles['BodyText']) for cell in row.find_all(["td", "th"])]
                table_data.append(row_data)
            col_count = len(table_data[0]) if table_data and table_data[0] else 1
            col_width = PAGE_WIDTH / col_count
            table_style = TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
            ])
            table = Table(table_data, colWidths=[col_width] * col_count, style=table_style)
            elements.append(table)
        elif elem.name:
            paragraph = Paragraph(elem.get_text(strip=True), styles['BodyText'])
            elements.append(paragraph)
            elements.append(Spacer(1, 12))
    return elements

def add_section_title(elements, title):
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'SectionTitle',
        fontSize=16,
        fontName='Helvetica',
        textColor=colors.HexColor("#00C7C4"),
        alignment=1,
        spaceAfter=12,
        underline=True
    )
    elements.append(Paragraph(title, title_style))
    elements.append(Spacer(1, 12))

def generate_estimation_section(prompt, min_tokens=800):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {
                "role": "system",
                "content": (
                    "Tu es un expert en immobilier en France. Ta mission est de r√©diger un rapport d'analyse d√©taill√©, synth√©tique et professionnel "
                    "pour un bien immobilier. Le rapport doit √™tre limit√© √† 5 pages d'analyse (hors pages de garde) et inclure :\n"
                    "1. Une introduction personnalis√©e reprenant les informations du client (civilit√©, pr√©nom, nom, adresse, etc.).\n"
                    "2. Une comparaison des prix des biens r√©cemment vendus dans le m√™me secteur, avec des tableaux r√©capitulatifs (prix au m¬≤, rendement locatif en pourcentage, etc.).\n"
                    "3. Des pr√©visions claires sur l'√©volution du march√© √† 5 et 10 ans.\n"
                    "4. Une description pr√©cise de la localisation du bien sur un plan (par exemple, coordonn√©es g√©ographiques ou description d√©taill√©e de l'emplacement).\n"
                    "Utilise intelligemment les donn√©es fournies et ne te contente pas de les r√©p√©ter. Sois synth√©tique et oriente ton analyse vers des recommandations pratiques."
                )
            },
            {"role": "user", "content": prompt}
        ],
        max_tokens=min_tokens,
        temperature=0.7,
    )
    return markdown_to_elements(response.choices[0].message.content)

def resize_image(image_path, output_path, target_size=(469, 716)):
    from PIL import Image as PILImage
    with PILImage.open(image_path) as img:
        img = img.resize(target_size, PILImage.LANCZOS)
        img.save(output_path)

### Nouvelle fonction : Extraction DVF et cr√©ation du tableau comparatif
# üîç Fonction am√©lior√©e pour charger les donn√©es DVF avec plusieurs crit√®res
def load_dvf_data_avance(form_data):
    try:
        code_postal = str(form_data.get("code_postal", "")).zfill(5)
        adresse = form_data.get("adresse", "").lower()
        type_bien = form_data.get("type_bien", "").capitalize()
        surface_bien = float(form_data.get("surface", 0))

        dept_code = code_postal[:2]
        file_path_gz = os.path.join(DVF_FOLDER, f"{dept_code}.csv.gz")
        file_path_csv = os.path.join(DVF_FOLDER, f"{dept_code}.csv")

        if os.path.exists(file_path_gz):
            df = pd.read_csv(file_path_gz, sep="|", dtype={"code_postal": str}, low_memory=False)
        elif os.path.exists(file_path_csv):
            df = pd.read_csv(file_path_csv, sep="|", dtype={"code_postal": str}, low_memory=False)
        else:
            return None, f"Aucun fichier trouv√© pour le d√©partement {dept_code}."

        df = df[df["code_postal"] == code_postal]
        df = df[df["Type local"].isin(["Appartement", "Maison"])]

        # Filtrage par type de bien
        if type_bien in ["Appartement", "Maison"]:
            df = df[df["Type local"] == type_bien]

        # Filtrage souple par adresse
        if adresse:
            df = df[df["Adresse"].str.lower().str.contains(adresse.split()[0], na=False)]

        df = df[(df["Surface reelle bati"] > 10) & (df["Valeur fonciere"] > 1000)]
        if surface_bien > 0:
            df = df[df["Surface reelle bati"].between(surface_bien * 0.7, surface_bien * 1.3)]

        df["prix_m2"] = df["Valeur fonciere"] / df["Surface reelle bati"]
        df = df.sort_values(by="Date mutation", ascending=False)

        return df, None
    except Exception as e:
        return None, f"Erreur lors du chargement avanc√© des donn√©es DVF : {str(e)}"

def get_dvf_comparables(form_data):
    try:
        df = load_dvf_data_avance(form_data)
        if df is None or df.empty:
            return "Aucune donn√©e DVF trouv√©e pour cette estimation."

        df["prix_m2"] = df["Valeur fonciere"] / df["Surface reelle bati"]
        df = df.sort_values(by="Date mutation", ascending=False).head(10)

        table_md = "| Adresse | Surface (m¬≤) | Prix (‚Ç¨) | Prix/m¬≤ (‚Ç¨) |\n"
        table_md += "|---|---|---|---|\n"
        for _, row in df.iterrows():
            adresse = row.get("Adresse", "")
            surface = row.get("Surface reelle bati", 0)
            valeur = row.get("Valeur fonciere", 0)
            prix_m2 = row.get("prix_m2", 0)
            table_md += f"| {adresse} | {surface:.0f} | {valeur:.0f} | {prix_m2:.0f} |\n"

        return f"Voici les 10 derni√®res transactions similaires pour ce secteur :\n\n{table_md}"
    except Exception as e:
        return f"Donn√©es indisponibles pour cette estimation. Erreur : {str(e)}"
"
        
        # Lecture du fichier en for√ßant la colonne code_postal en str
        df = pd.read_csv(dvf_path, sep="|", compression="gzip", dtype={"code_postal": str}, low_memory=False)
        df["code_postal"] = df["code_postal"].astype(str).str.zfill(5)
        # Filtrage par code postal exact (ici on attend "06000")
        df = df[df["code_postal"] == code_postal]
        df = df[df["Type local"].isin(["Appartement", "Maison"])]
        # Filtre de base pour √©viter des valeurs aberrantes
        df = df[(df["Surface reelle bati"] > 10) & (df["Valeur fonciere"] > 1000)]
        df["prix_m2"] = df["Valeur fonciere"] / df["Surface reelle bati"]
        df = df.sort_values(by="Date mutation", ascending=False).head(10)
        
        # Cr√©ation d'un tableau Markdown
        table_md = "| Adresse | Surface (m¬≤) | Prix (‚Ç¨) | Prix/m¬≤ (‚Ç¨) |\n"
        table_md += "|---|---|---|---|\n"
        for _, row in df.iterrows():
            adresse = row.get("Adresse", "")
            surface = row.get("Surface reelle bati", 0)
            valeur = row.get("Valeur fonciere", 0)
            prix_m2 = row.get("prix_m2", 0)
            table_md += f"| {adresse} | {surface:.0f} | {valeur:.0f} | {prix_m2:.0f} |\n"
        
        return f"Voici les 10 derni√®res transactions pour le secteur (code postal {code_postal}):\n\n{table_md}"
    except Exception as e:
        return f"Donn√©es indisponibles pour cette estimation. Erreur : {str(e)}"

### Nouvelle fonction : G√©n√©rer un graphique d'√©volution du prix moyen au m¬≤
def generate_dvf_chart(form_data):
    try:
        code_postal = str(form_data.get("code_postal", "")).zfill(5)
        if not code_postal or not code_postal.isdigit() or len(code_postal) < 2:
            return None
        
        dept_code = code_postal[:2]
        dvf_path = os.path.join(DVF_FOLDER, f"{dept_code}.csv.gz")
        if not os.path.exists(dvf_path):
            return None
        
        # Lecture du fichier en conservant la colonne code_postal en str
        df = pd.read_csv(dvf_path, sep="|", compression="gzip", dtype={"code_postal": str}, low_memory=False)
        df["code_postal"] = df["code_postal"].astype(str).str.zfill(5)
        df = df[df["Type local"].isin(["Appartement", "Maison"])]
        df = df[(df["Surface reelle bati"] > 10) & (df["Valeur fonciere"] > 1000)]
        df["prix_m2"] = df["Valeur fonciere"] / df["Surface reelle bati"]
        df["Date mutation"] = pd.to_datetime(df["Date mutation"], errors="coerce")
        df = df.dropna(subset=["Date mutation"])
        df["Ann√©e"] = df["Date mutation"].dt.year
        prix_m2_par_annee = df.groupby("Ann√©e")["prix_m2"].mean().round(0)
        
        # Cr√©er le graphique
        plt.figure(figsize=(8, 5))
        prix_m2_par_annee.plot(kind="line", marker="o", title=f"√âvolution du prix moyen au m¬≤ - {code_postal}")
        plt.ylabel("Prix moyen au m¬≤ (‚Ç¨)")
        plt.xlabel("Ann√©e")
        plt.grid(True)
        plt.tight_layout()
        
        # Sauvegarder dans un fichier temporaire
        tmp_img = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        plt.savefig(tmp_img.name)
        plt.close()
        return tmp_img.name
    except Exception as e:
        return None

### Fonctions de d√©coration pour la mise en page du PDF
from reportlab.lib.enums import TA_CENTER

def add_simple_table_of_contents(elements):
    styles = getSampleStyleSheet()
    toc_style = styles['Heading2']
    elements.append(Paragraph("üóÇÔ∏è Table des mati√®res", toc_style))
    toc = """
    1. Informations personnelles  
    2. D√©tails du bien  
    3. Environnement & Quartier  
    4. Donn√©es DVF (comparatif + graphique)  
    5. Estimation et Analyse IA  
    6. Recommandations  
    """
    elements.append(Paragraph(toc.replace("\n", "<br/>"), styles['BodyText']))
    elements.append(PageBreak())

def create_highlighted_box(text):
    styles = getSampleStyleSheet()
    box_style = ParagraphStyle(
        'BoxStyle',
        parent=styles['BodyText'],
        backColor=colors.whitesmoke,
        borderColor=colors.HexColor("#00C7C4"),
        borderWidth=1,
        borderPadding=6,
        spaceBefore=12,
        spaceAfter=12,
    )
    return [Paragraph(text, box_style)]

def colored_paragraph(text, bg_color="#e8f9f9"):
    styles = getSampleStyleSheet()
    p = ParagraphStyle(
        'ColoredPara',
        parent=styles['BodyText'],
        backColor=bg_color,
        borderPadding=4,
        leading=14
    )
    return Paragraph(text, p)

def center_image(image_path, width=400, height=300):
    img = Image(image_path, width=width, height=height)
    img.hAlign = 'CENTER'
    return img

@app.route("/generate_estimation", methods=["POST"])
def generate_estimation():
    try:
        form_data = request.json
        name = form_data.get("nom", "Client")
        city = form_data.get("quartier", "Non sp√©cifi√©")
        adresse = form_data.get("adresse", "Non sp√©cifi√©e")

        filename = os.path.join(PDF_FOLDER, f"estimation_{name.replace(' ', '_')}.pdf")
        doc = SimpleDocTemplate(filename, pagesize=A4, topMargin=2*cm, bottomMargin=2*cm, leftMargin=2*cm, rightMargin=2*cm)
        elements = []

        # Page de garde
        covers = ["static/cover_image.png", "static/cover_image1.png"]
        resized = []
        for img_path in covers:
            if os.path.exists(img_path):
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
                    resize_image(img_path, tmp.name)
                    resized.append(tmp.name)

        elements.append(Image(resized[0], width=469, height=716))
        elements.append(PageBreak())

        # Ajout d'un sommaire (facultatif)
        add_simple_table_of_contents(elements)

        # Sections manuelles pour la version synchrone
        sections = [
            ("Informations personnelles", 
             f"Commence le rapport par une introduction personnalis√©e en rappelant les informations suivantes : "
             f"{form_data.get('civilite')} {form_data.get('prenom')} {form_data.get('nom')}, domicili√©(e) √† {form_data.get('adresse_personnelle')}, "
             f"code postal {form_data.get('code_postal')}, email : {form_data.get('email')}, t√©l√©phone : {form_data.get('telephone')}. "
             f"Ensuite, pr√©sente bri√®vement la situation du client."),
            ("Informations g√©n√©rales sur le bien", f"Le bien est un(e) {form_data.get('type_bien')}. Voici les caract√©ristiques indiqu√©es : {form_data}."),
            ("√âtat g√©n√©ral du bien", f"Voici les infos : √©tat g√©n√©ral = {form_data.get('etat_general')}, travaux r√©cents = {form_data.get('travaux_recent')}, d√©tails = {form_data.get('travaux_details')}, probl√®mes connus = {form_data.get('problemes')}."),
            ("√âquipements et commodit√©s", f"√âquipements renseign√©s : cuisine/SDB = {form_data.get('equipement_cuisine')}, √©lectrom√©nager = {form_data.get('electromenager')}, s√©curit√© = {form_data.get('securite')}."),
            ("Environnement et emplacement", f"Adresse : {form_data.get('adresse')} - Quartier : {form_data.get('quartier')} - Atouts : {form_data.get('atouts_quartier')} - Commerces : {form_data.get('distance_commerces')}."),
            ("Historique et march√©", f"Temps sur le march√© : {form_data.get('temps_marche')} - Offres : {form_data.get('offres')} - Raison : {form_data.get('raison_vente')} - Prix similaires : {form_data.get('prix_similaires')}."),
            ("Caract√©ristiques sp√©cifiques", f"DPE : {form_data.get('dpe')} - Orientation : {form_data.get('orientation')} - Vue : {form_data.get('vue')}."),
            ("Informations l√©gales", f"Contraintes : {form_data.get('contraintes')} - Documents √† jour : {form_data.get('documents')} - Charges de copropri√©t√© : {form_data.get('charges_copro')}."),
            ("Prix et conditions de vente", f"Prix envisag√© : {form_data.get('prix')} - N√©gociable : {form_data.get('negociation')} - Conditions particuli√®res : {form_data.get('conditions')}."),
            ("Autres informations", f"Occupation : {form_data.get('occupe')} - Dettes : {form_data.get('dettes')} - Charges fixes : {form_data.get('charges_fixes')}."),
            ("Estimation IA", f"Estime le prix du bien situ√© √† {form_data.get('adresse')} ({form_data.get('quartier')}), selon les infos fournies : {form_data}."),
            ("Analyse pr√©dictive", f"Pr√©diction : comment √©voluera ce bien ({form_data.get('type_bien')}) dans les 5 √† 10 prochaines ann√©es dans le quartier de {form_data.get('quartier')} ?"),
            ("Recommandations IA", f"Que recommandes-tu √† ce client pour mieux vendre ce bien ({form_data.get('type_bien')}) ?"),
        ]

        for title, prompt in sections:
            add_section_title(elements, title)
            section = generate_estimation_section(prompt)
            elements.extend(section)
            elements.append(PageBreak())

        # Page de fin
        if len(resized) > 1:
            elements.append(Image(resized[1], width=469, height=716))

        doc.build(elements)
        return send_file(filename, as_attachment=True)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ==============================
# Endpoints pour g√©n√©ration asynchrone avec faux curseur et int√©gration DVF
# ==============================

progress_map = {}  # job_id -> progression (0-100)
results_map = {}   # job_id -> chemin du PDF g√©n√©r√©

def generate_estimation_background(job_id, form_data):
    try:
        # Version asynchrone : on combine toutes les infos en un prompt unique, et on ajoute le DVF
        progress_map[job_id] = 0
        time.sleep(1)
        progress_map[job_id] = 40

        # Cr√©ation du PDF et page de garde
        name = form_data.get("nom", "Client")
        filename = os.path.join(PDF_FOLDER, f"estimation_{name.replace(' ', '_')}_{job_id}.pdf")
        doc = SimpleDocTemplate(filename, pagesize=A4, topMargin=2*cm, bottomMargin=2*cm, leftMargin=2*cm, rightMargin=2*cm)
        elements = []
        
        covers = ["static/cover_image.png", "static/cover_image1.png"]
        resized = []
        for img_path in covers:
            if os.path.exists(img_path):
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
                    resize_image(img_path, tmp.name)
                    resized.append(tmp.name)
                    
        if resized:
            elements.append(Image(resized[0], width=469, height=716))
        elements.append(PageBreak())
        progress_map[job_id] = 70
        time.sleep(1)
        
        # Int√©gration des donn√©es DVF : tableau comparatif
        from reportlab.lib.styles import getSampleStyleSheet
        styles = getSampleStyleSheet()
        dvf_summary = get_dvf_comparables(form_data)
        elements.append(Paragraph("Tableau comparatif des ventes r√©centes dans le secteur :", styles['Heading3']))
        elements.extend(markdown_to_elements(dvf_summary))
        elements.append(PageBreak())
        
        # Int√©gration des donn√©es DVF : graphique
        dvf_chart_path = generate_dvf_chart(form_data)
        if dvf_chart_path and os.path.exists(dvf_chart_path):
            elements.append(center_image(dvf_chart_path, width=400, height=300))
            elements.append(Paragraph("Graphique : √âvolution du prix moyen au m¬≤", styles['Heading3']))
            elements.append(PageBreak())
        progress_map[job_id] = 80
        time.sleep(1)
        
        # Appel unique √† OpenAI pour g√©n√©rer l'int√©gralit√© du rapport avec donn√©es DVF comme base d'analyse
        combined_prompt = (
            f"# 1. Informations personnelles\n"
            f"{form_data.get('civilite')} {form_data.get('prenom')} {form_data.get('nom')}, domicili√©(e) √† "
            f"{form_data.get('adresse_personnelle')} ({form_data.get('code_postal')}), "
            f"email : {form_data.get('email')}, t√©l√©phone : {form_data.get('telephone')}.\n\n"

            f"# 2. D√©tails du bien\n"
            f"Type : {form_data.get('type_bien')} - √âtat : {form_data.get('etat_general')} - Travaux r√©cents : {form_data.get('travaux_recent')} "
            f"- D√©tails : {form_data.get('travaux_details')} - Probl√®mes : {form_data.get('problemes')}.\n"
            f"√âquipements : {form_data.get('equipement_cuisine')}, {form_data.get('electromenager')}, {form_data.get('securite')}.\n"
            f"Autres : DPE = {form_data.get('dpe')}, Orientation = {form_data.get('orientation')}, Vue = {form_data.get('vue')}.\n\n"

            f"# 3. Environnement & Quartier\n"
            f"Adresse : {form_data.get('adresse')} - Quartier : {form_data.get('quartier')} - Commerces √† proximit√© : {form_data.get('distance_commerces')} - Atouts : {form_data.get('atouts_quartier')}.\n\n"

            f"# 4. Donn√©es DVF (comparatif + graphique)\n"
            f"Les 10 derni√®res ventes sont affich√©es dans le tableau, ainsi que le graphique d'√©volution des prix au m¬≤ dans le secteur {form_data.get('code_postal')}.\n\n"
  
            f"# 5. Estimation et Analyse IA\n"
            f"Estime la valeur actuelle du bien bas√© sur les informations ci-dessus.\n"
            f"Historique du march√© : temps sur le march√© : {form_data.get('temps_marche')} - offres : {form_data.get('offres')} - "
            f"raison de vente : {form_data.get('raison_vente')} - prix similaires : {form_data.get('prix_similaires')}.\n"
            f"Prix vis√© par le client : {form_data.get('prix')} (n√©gociable : {form_data.get('negociation')}).\n\n"

            f"# 6. Recommandations\n"
            f"Conseils pratiques pour am√©liorer la vente. Bien occup√© : {form_data.get('occupe')} - dettes : {form_data.get('dettes')} - charges : {form_data.get('charges_fixes')}.\n"
            f"‚ö†Ô∏è Utilise **en priorit√©** les donn√©es DVF comparatives et les tendances graphiques pour appuyer ton estimation."
)
        section = generate_estimation_section(combined_prompt)
        elements.extend(section)
        elements.append(PageBreak())
        progress_map[job_id] = 90
        time.sleep(1)
        
        # Page de fin
        if len(resized) > 1:
            elements.append(Image(resized[1], width=469, height=716))
        progress_map[job_id] = 90
        time.sleep(1)
        
        doc.build(elements)
        progress_map[job_id] = 100
        results_map[job_id] = filename
        
    except Exception as e:
        progress_map[job_id] = -1
        results_map[job_id] = None

@app.route("/start_estimation", methods=["POST"])
def start_estimation():
    form_data = request.json or {}
    job_id = str(uuid.uuid4())
    thread = threading.Thread(target=generate_estimation_background, args=(job_id, form_data))
    thread.start()
    return jsonify({"job_id": job_id})

@app.route("/progress", methods=["GET"])
def get_progress():
    job_id = request.args.get("job_id")
    if not job_id or job_id not in progress_map:
        return jsonify({"error": "Job introuvable"}), 404
    return jsonify({"progress": progress_map[job_id]})

@app.route("/download_estimation", methods=["GET"])
def download_estimation():
    job_id = request.args.get("job_id")
    if not job_id or job_id not in results_map:
        return jsonify({"error": "Job introuvable"}), 404
    pdf_path = results_map[job_id]
    if not pdf_path or not os.path.exists(pdf_path):
        return jsonify({"error": "PDF introuvable ou non g√©n√©r√©"}), 404
    return send_file(pdf_path, as_attachment=True)

# ‚úÖ Fin du fichier : routes de base pour test Render
@app.route("/")
def home():
    return "‚úÖ API d‚Äôestimation immobili√®re op√©rationnelle !"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print(f"‚úÖ D√©marrage de l'API sur le port {port}")
    app.run(host="0.0.0.0", port=port)
