from flask import Flask, request, send_file, jsonify
from flask_cors import CORS
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.lib import colors
from datetime import datetime
import os
import tempfile
import threading
import time
import uuid
from openai import OpenAI
from markdown2 import markdown as md_to_html
from bs4 import BeautifulSoup

# üîß Initialisation de Flask
app = Flask(__name__)
CORS(app)

# üîê Client OpenAI
client = OpenAI()

PDF_FOLDER = "./pdf_reports/"
os.makedirs(PDF_FOLDER, exist_ok=True)

def markdown_to_elements(md_text):
    elements = []
    html_content = md_to_html(md_text, extras=["tables"])
    soup = BeautifulSoup(html_content, "html.parser")
    styles = getSampleStyleSheet()
    PAGE_WIDTH = A4[0] - 4 * cm

    for elem in soup.contents:
        if elem.name == "table":
            table_data = []
            for row in elem.find_all("tr"):
                row_data = [Paragraph(cell.get_text(strip=True), styles['BodyText']) for cell in row.find_all(["td", "th"])]
                table_data.append(row_data)
            col_count = len(table_data[0]) if table_data and table_data[0] else 1
            col_width = PAGE_WIDTH / col_count
            table_style = TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
            ])
            table = Table(table_data, colWidths=[col_width] * col_count, style=table_style)
            elements.append(table)
        elif elem.name:
            paragraph = Paragraph(elem.get_text(strip=True), styles['BodyText'])
            elements.append(paragraph)
            elements.append(Spacer(1, 12))
    return elements

def add_section_title(elements, title):
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'SectionTitle',
        fontSize=16,
        fontName='Helvetica',
        textColor=colors.HexColor("#00C7C4"),
        alignment=1,
        spaceAfter=12,
        underline=True
    )
    elements.append(Paragraph(title, title_style))
    elements.append(Spacer(1, 12))

def generate_estimation_section(prompt, max_tokens=2000, temperature=0.8):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {
                "role": "system",
                "content": (
                    "Tu es un expert en immobilier en France. Ta mission est de r√©diger un rapport d'analyse d√©taill√©, synth√©tique et professionnel pour un bien immobilier √† partir des donn√©es fournies dans le questionnaire. "
                    "Le rapport doit √™tre structur√© sur 4 pages d'analyse (hors pages de garde) et divis√© en 4 sections distinctes :\n\n"
                    "1. **Introduction personnalis√©e** : R√©capitule les informations du client (civilit√©, pr√©nom, nom, adresse, code postal, email, t√©l√©phone) et pr√©sente bri√®vement le contexte du bien.\n\n"
                    "2. **Analyse comparative** : Fournis une analyse d√©taill√©e avec un tableau comparatif des prix des biens r√©cemment vendus dans le m√™me secteur. Int√®gre des informations sur le quartier (proximit√© des m√©tros, commerces, loisirs, etc.) et compare ces donn√©es avec la valeur actuelle estim√©e du bien.\n\n"
                    "3. **Localisation et environnement** : D√©cris pr√©cis√©ment la localisation du bien, en incluant une r√©f√©rence √† une image de plan ou des coordonn√©es g√©ographiques pr√©cises, et analyse le quartier (commodit√©s, transports, espaces verts, etc.).\n\n"
                    "4. **Analyse pr√©dictive et recommandations** : Propose une analyse pr√©dictive sur l'√©volution du march√© et la valeur du bien √† 5 et 10 ans, avec des recommandations pratiques et structur√©es.\n\n"
                    "Utilise intelligemment les donn√©es fournies dans le questionnaire. Ne te contente pas de r√©p√©ter les informations, mais cr√©e un rapport structur√©, d√©taill√© et pr√©cis qui int√®gre un tableau comparatif et une analyse pr√©dictive compl√®te."
                )
            },
            {"role": "user", "content": prompt}
        ],
        max_tokens=max_tokens,
        temperature=temperature,
    )
    return markdown_to_elements(response.choices[0].message.content)




def resize_image(image_path, output_path, target_size=(469, 716)):
    from PIL import Image as PILImage
    with PILImage.open(image_path) as img:
        img = img.resize(target_size, PILImage.LANCZOS)
        img.save(output_path)

@app.route("/generate_estimation", methods=["POST"])
def generate_estimation():
    try:
        form_data = request.json
        name = form_data.get("nom", "Client")
        city = form_data.get("quartier", "Non sp√©cifi√©")
        adresse = form_data.get("adresse", "Non sp√©cifi√©e")

        filename = os.path.join(PDF_FOLDER, f"estimation_{name.replace(' ', '_')}.pdf")
        doc = SimpleDocTemplate(filename, pagesize=A4, topMargin=2*cm, bottomMargin=2*cm, leftMargin=2*cm, rightMargin=2*cm)
        elements = []

        # Page de garde
        covers = ["static/cover_image.png", "static/cover_image1.png"]
        resized = []
        for img_path in covers:
            if os.path.exists(img_path):
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
                    resize_image(img_path, tmp.name)
                    resized.append(tmp.name)

        elements.append(Image(resized[0], width=469, height=716))
        elements.append(PageBreak())

        # Pour la version synchrone, nous conservons les sections d√©finies manuellement
        sections = [
            ("Informations personnelles", 
             f"Commence le rapport par une introduction personnalis√©e en rappelant les informations suivantes : "
             f"{form_data.get('civilite')} {form_data.get('prenom')} {form_data.get('nom')}, domicili√©(e) √† {form_data.get('adresse_personnelle')}, "
             f"code postal {form_data.get('code_postal')}, email : {form_data.get('email')}, t√©l√©phone : {form_data.get('telephone')}. "
             f"Ensuite, pr√©sente bri√®vement la situation du client."),
            ("Informations g√©n√©rales sur le bien", f"Le bien est un(e) {form_data.get('type_bien')}. Voici les caract√©ristiques indiqu√©es : {form_data}."),
            ("√âtat g√©n√©ral du bien", f"Voici les infos : √©tat g√©n√©ral = {form_data.get('etat_general')}, travaux r√©cents = {form_data.get('travaux_recent')}, d√©tails = {form_data.get('travaux_details')}, probl√®mes connus = {form_data.get('problemes')}."),
            ("√âquipements et commodit√©s", f"√âquipements renseign√©s : cuisine/SDB = {form_data.get('equipement_cuisine')}, √©lectrom√©nager = {form_data.get('electromenager')}, s√©curit√© = {form_data.get('securite')}."),
            ("Environnement et emplacement", f"Adresse : {form_data.get('adresse')} - Quartier : {form_data.get('quartier')} - Atouts : {form_data.get('atouts_quartier')} - Commerces : {form_data.get('distance_commerces')}."),
            ("Historique et march√©", f"Temps sur le march√© : {form_data.get('temps_marche')} - Offres : {form_data.get('offres')} - Raison : {form_data.get('raison_vente')} - Prix similaires : {form_data.get('prix_similaires')}."),
            ("Caract√©ristiques sp√©cifiques", f"DPE : {form_data.get('dpe')} - Orientation : {form_data.get('orientation')} - Vue : {form_data.get('vue')}."),
            ("Informations l√©gales", f"Contraintes : {form_data.get('contraintes')} - Documents √† jour : {form_data.get('documents')} - Charges de copropri√©t√© : {form_data.get('charges_copro')}."),
            ("Prix et conditions de vente", f"Prix envisag√© : {form_data.get('prix')} - N√©gociable : {form_data.get('negociation')} - Conditions particuli√®res : {form_data.get('conditions')}."),
            ("Autres informations", f"Occupation : {form_data.get('occupe')} - Dettes : {form_data.get('dettes')} - Charges fixes : {form_data.get('charges_fixes')}."),
            ("Estimation IA", f"Estime le prix du bien situ√© √† {form_data.get('adresse')} ({form_data.get('quartier')}), selon les infos fournies : {form_data}."),
            ("Analyse pr√©dictive", f"Pr√©diction : comment √©voluera ce bien ({form_data.get('type_bien')}) dans les 5 √† 10 prochaines ann√©es dans le quartier de {form_data.get('quartier')} ?"),
            ("Recommandations IA", f"Que recommandes-tu √† ce client pour mieux vendre ce bien ({form_data.get('type_bien')}) ?"),
        ]

        for title, prompt in sections:
            add_section_title(elements, title)
            section = generate_estimation_section(prompt)
            elements.extend(section)
            elements.append(PageBreak())

        # Page de fin
        if len(resized) > 1:
            elements.append(Image(resized[1], width=469, height=716))

        doc.build(elements)
        return send_file(filename, as_attachment=True)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ==============================
# Endpoints pour g√©n√©ration asynchrone avec faux curseur
# ==============================

progress_map = {}  # job_id -> progression (0-100)
results_map = {}   # job_id -> chemin du PDF g√©n√©r√©

def generate_estimation_background(job_id, form_data):
    try:
        # Pour cette version asynchrone, on retire la d√©coupe en sections.
        # On combine toutes les informations dans un unique prompt pour laisser l'IA g√©rer la structure (5 pages max)
        progress_map[job_id] = 0
        time.sleep(1)
        progress_map[job_id] = 40

        # Cr√©ation du PDF et page de garde
        name = form_data.get("nom", "Client")
        filename = os.path.join(PDF_FOLDER, f"estimation_{name.replace(' ', '_')}_{job_id}.pdf")
        doc = SimpleDocTemplate(filename, pagesize=A4, topMargin=2*cm, bottomMargin=2*cm, leftMargin=2*cm, rightMargin=2*cm)
        elements = []
        
        covers = ["static/cover_image.png", "static/cover_image1.png"]
        resized = []
        for img_path in covers:
            if os.path.exists(img_path):
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
                    resize_image(img_path, tmp.name)
                    resized.append(tmp.name)
                    
        if resized:
            elements.append(Image(resized[0], width=469, height=716))
        elements.append(PageBreak())
        progress_map[job_id] = 70
        time.sleep(1)
        
        # Appel unique √† OpenAI pour g√©n√©rer l'int√©gralit√© du rapport.
        # Le prompt contient toutes les informations du formulaire, et l'IA doit organiser le rapport en 5 pages maximum.
        combined_prompt = (
            f"Informations personnelles: {form_data.get('civilite')} {form_data.get('prenom')} {form_data.get('nom')}, "
            f"domicili√©(e) √† {form_data.get('adresse_personnelle')}, code postal {form_data.get('code_postal')}, "
            f"email: {form_data.get('email')}, t√©l√©phone: {form_data.get('telephone')}. "
            f"Informations g√©n√©rales sur le bien: le bien est un(e) {form_data.get('type_bien')}. D√©tails: {form_data}. "
            f"√âtat g√©n√©ral: {form_data.get('etat_general')}, travaux r√©cents: {form_data.get('travaux_recent')}, "
            f"d√©tails: {form_data.get('travaux_details')}, probl√®mes connus: {form_data.get('problemes')}. "
            f"√âquipements et commodit√©s: {form_data.get('equipement_cuisine')}, {form_data.get('electromenager')}, {form_data.get('securite')}. "
            f"Environnement et emplacement: {form_data.get('adresse')}, {form_data.get('quartier')}, atouts: {form_data.get('atouts_quartier')}, "
            f"commerces: {form_data.get('distance_commerces')}. "
            f"Historique et march√©: {form_data.get('temps_marche')}, offres: {form_data.get('offres')}, "
            f"raison de vente: {form_data.get('raison_vente')}, prix similaires: {form_data.get('prix_similaires')}. "
            f"Caract√©ristiques sp√©cifiques: {form_data.get('dpe')}, {form_data.get('orientation')}, {form_data.get('vue')}. "
            f"Informations l√©gales: {form_data.get('contraintes')}, {form_data.get('documents')}, charges: {form_data.get('charges_copro')}. "
            f"Prix et conditions de vente: {form_data.get('prix')}, n√©gociable: {form_data.get('negociation')}, conditions: {form_data.get('conditions')}. "
            f"Autres informations: {form_data.get('occupe')}, dettes: {form_data.get('dettes')}, charges fixes: {form_data.get('charges_fixes')}."
        )
        section = generate_estimation_section(combined_prompt)
        elements.extend(section)
        elements.append(PageBreak())
        progress_map[job_id] = 80
        time.sleep(1)
        
        # Page de fin
        if len(resized) > 1:
            elements.append(Image(resized[1], width=469, height=716))
        progress_map[job_id] = 90
        time.sleep(1)
        
        doc.build(elements)
        progress_map[job_id] = 100
        results_map[job_id] = filename
        
    except Exception as e:
        progress_map[job_id] = -1
        results_map[job_id] = None

@app.route("/start_estimation", methods=["POST"])
def start_estimation():
    form_data = request.json or {}
    job_id = str(uuid.uuid4())
    thread = threading.Thread(target=generate_estimation_background, args=(job_id, form_data))
    thread.start()
    return jsonify({"job_id": job_id})

@app.route("/progress", methods=["GET"])
def get_progress():
    job_id = request.args.get("job_id")
    if not job_id or job_id not in progress_map:
        return jsonify({"error": "Job introuvable"}), 404
    return jsonify({"progress": progress_map[job_id]})

@app.route("/download_estimation", methods=["GET"])
def download_estimation():
    job_id = request.args.get("job_id")
    if not job_id or job_id not in results_map:
        return jsonify({"error": "Job introuvable"}), 404
    pdf_path = results_map[job_id]
    if not pdf_path or not os.path.exists(pdf_path):
        return jsonify({"error": "PDF introuvable ou non g√©n√©r√©"}), 404
    return send_file(pdf_path, as_attachment=True)

# ‚úÖ Fin du fichier : routes de base pour test Render
@app.route("/")
def home():
    return "‚úÖ API d‚Äôestimation immobili√®re op√©rationnelle !"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print(f"‚úÖ D√©marrage de l'API sur le port {port}")
    app.run(host="0.0.0.0", port=port)
